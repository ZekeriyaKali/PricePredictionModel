# train_text_model.py
# Bu script: 'car_faults.csv' iÃ§indeki 'description' -> 'issue' verisini kullanarak
# TF-IDF + Logistic Regression tabanlÄ± bir metin sÄ±nÄ±flandÄ±rÄ±cÄ± eÄŸitir ve model + vectorizer'Ä± kaydeder.

# pandas: CSV okuma, DataFrame iÅŸlemleri (veri hazÄ±rlama iÃ§in)
import pandas as pd

# train_test_split: veriyi eÄŸitim ve test olarak ayÄ±rmak iÃ§in
from sklearn.model_selection import train_test_split

# TF-IDF vektÃ¶rizer: metinleri sayÄ±sal Ã¶zelliklere Ã§evirir (n-gram desteÄŸi ile)
from sklearn.feature_extraction.text import TfidfVectorizer

# LogisticRegression: sÄ±nÄ±flandÄ±rma algoritmasÄ± (lineer, hÄ±zlÄ± ve iyi baseline)
from sklearn.linear_model import LogisticRegression

# Performans Ã¶lÃ§Ã¼mleri: classification_report (precision, recall, f1) ve accuracy
from sklearn.metrics import classification_report, accuracy_score

# joblib: sklearn objelerini (model, vectorizer) diske kaydetmek iÃ§in kullanÄ±lÄ±r
import joblib

# ---------------------------------------------------------
# 1) Veri yÃ¼kleme
# - CSV dosyasÄ±nÄ± ';' ile ayrÄ±lmÄ±ÅŸ olarak okuyoruz (senin dosyanda bu delimiter kullanÄ±lmÄ±ÅŸ).
# - Ä°lk birkaÃ§ satÄ±rÄ± ve kolon isimlerini yazdÄ±rarak veri yapÄ±sÄ±nÄ± doÄŸruluyoruz.
# ---------------------------------------------------------
df = pd.read_csv("car_faults.csv", delimiter=";")  # CSV dosyasÄ±nÄ± DataFrame'e yÃ¼kle
print("Veri Ã¶rneÄŸi:")                              # debug/inceleme amaÃ§lÄ±
print(df.head())                                   # veri Ã¶rneklerini gÃ¶ster
print("Kolonlar:", df.columns)                     # kolon isimlerini yazdÄ±r

# ---------------------------------------------------------
# 2) Train/Test ayrÄ±mÄ±
# - description (metin) baÄŸÄ±msÄ±z deÄŸiÅŸken (X), issue (etiket) baÄŸÄ±mlÄ± deÄŸiÅŸken (y)
# - test_size=0.2 => verinin %20'si test iÃ§in ayrÄ±lÄ±r
# - random_state sabitlenirse sonuÃ§lar tekrarlanabilir (reproducibility)
# ---------------------------------------------------------
X_train, X_test, y_train, y_test = train_test_split(
    df["description"],    # Ã¶zellik kolonu (text)
    df["issue"],          # hedef kolonu (etiket)
    test_size=0.2,        # test oranÄ±
    random_state=42       # tekrar Ã¼retilebilirlik iÃ§in sabit tohum
)

# ---------------------------------------------------------
# 3) Metni sayÄ±sallaÅŸtÄ±rma (TF-IDF)
# - ngram_range=(1,2) => unigram + bigram al; kelime kombinasyonlarÄ± modelin daha iyi Ã¶ÄŸrenmesini saÄŸlar
# - fit_transform: eÄŸitim verisinde fit ederek vektÃ¶rize et (vocab oluÅŸturur)
# - transform: test verisini aynÄ± vocabulary ile dÃ¶nÃ¼ÅŸtÃ¼r
# ---------------------------------------------------------
vectorizer = TfidfVectorizer(ngram_range=(1, 2))   # TF-IDF vektÃ¶rleÅŸtirici Ã¶rneÄŸi
X_train_tfidf = vectorizer.fit_transform(X_train)  # sadece eÄŸitim verisinde fit et ve dÃ¶nÃ¼ÅŸtÃ¼r
X_test_tfidf = vectorizer.transform(X_test)        # test verisini aynÄ± vektÃ¶rizer ile dÃ¶nÃ¼ÅŸtÃ¼r

# ---------------------------------------------------------
# 4) Model eÄŸitimi (Logistic Regression)
# - max_iter=1000: iterasyon sayÄ±sÄ±nÄ± artÄ±rdÄ±k; bazÄ± veri setlerinde default iterasyon yetersiz kalÄ±r
# - model.fit ile eÄŸitim verisi Ã¼zerinde parametreler optimize edilir
# ---------------------------------------------------------
model = LogisticRegression(max_iter=1000)  # Logistic Regression sÄ±nÄ±flandÄ±rÄ±cÄ±sÄ±
model.fit(X_train_tfidf, y_train)          # modeli eÄŸitim verisi ile eÄŸit

# ---------------------------------------------------------
# 5) DeÄŸerlendirme (Test Ã¼zerinde)
# - predict ile test seti iÃ§in tahmin alÄ±nÄ±r
# - classification_report: precision/recall/f1 ve support verir (sÄ±nÄ±f bazlÄ± performans)
# - accuracy_score: genel doÄŸruluk oranÄ±
# ---------------------------------------------------------
y_pred = model.predict(X_test_tfidf)  # test seti tahminleri

print("\nğŸ“Š Model PerformansÄ±:")                            # okunabilir Ã§Ä±ktÄ± baÅŸlÄ±ÄŸÄ±
print(classification_report(y_test, y_pred))              # detaylÄ± sÄ±nÄ±f raporu
print("Genel DoÄŸruluk (Accuracy):", accuracy_score(y_test, y_pred))  # tek satÄ±rlÄ±k Ã¶zet

# ---------------------------------------------------------
# 6) Model ve vektÃ¶rizer kaydetme
# - joblib.dump ile model ve vectorizer'Ä± diske kaydet; production veya inference iÃ§in yÃ¼kleyeceksin
# - kaydetme isimlerini versiyonlayabilir (Ã¶r: fault_model_v1.pkl) veya tarihlendirebilirsin
# ---------------------------------------------------------
joblib.dump(model, "fault_model.pkl")        # logistic model kaydÄ±
joblib.dump(vectorizer, "vectorizer.pkl")    # tf-idf vektÃ¶rizer kaydÄ±
print("\nâœ… Model ve vectorizer kaydedildi!")